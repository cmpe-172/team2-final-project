#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('react-backend:server');
var http = require('http');




// // DB TESTING:
//   var mysql = require('mysql');
//   var connection = mysql.createConnection({
//     host     : 'localhost',
//     user     : 'user172',
//     password : '123456',
//     database : 'employees'
//   });
//
//   connection.connect();
//   // SELECT * FROM employees WHERE emp_no = 10556;
//   var emp_no = 10556; // '10556';
//   connection.query('SELECT * FROM employees WHERE emp_no = ?;', [emp_no], function (error, results, fields) {
//     console.log('The results are: ', results);
//     if (error) throw error;
//     console.log('The first name is: ', results[0].first_name);
//   });
//
//   connection.end();
//   // END TESTING;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');//'3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/// TEST:

// models.sequelize.sync().then(function() {
//     /**
//      * Listen on provided port, on all network interfaces.
//      */
//     server.listen(port, function() {
//         debug('Express server listening on port ' + server.address().port);
//     });
//     server.on('error', onError);
//     server.on('listening', onListening);
// });

////

// /**
//  * Listen on provided port, on all network interfaces.
//  */
//
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
